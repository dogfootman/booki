---
description:
globs:
alwaysApply: true
---
# 기술 요구 사항 문서 (TRD)

## 1. 기술 요약
- **프로젝트 개요**: 하와이 액티비티 여행사를 위한 SaaS 플랫폼 개발. Next.js 15 기반의 반응형 웹 애플리케이션으로, 에이전트 스케줄 관리, 예약 관리, 결제, SNS 자동 게시, 다국어 지원, 관리자 대시보드 기능을 제공한다. AI 최적화는 예약 분산 및 과부하 알림에 활용된다.
- **핵심 기술 스택**: Next.js 15, TypeScript, Tailwind CSS, Shadcn UI, Lucide React, @tanstack/react-query, date-fns, es-toolkit
- **주요 기술 목표**: 2초 이내의 주요 뷰 첫 로드, GDPR & PCI-DSS 준수, WCAG 2.1 AA 준수, 오버부킹 0건 유지.
- **주요 기술 가정**: Stripe 결제 연동의 안정성, SNS API의 지속적인 가용성, AI 모델의 초기 정확도.

## 2. 기술 스택

| 범주              | 기술 / 라이브러리        | 사유|
| ----------------- | --------------------------- ||
| 프레임워크          | Next.js 15                  | 서버 사이드 렌더링(SSR), 정적 사이트 생성(SSG), API 라우팅 지원으로 초기 로딩 속도 개선 및 SEO 최적화. TypeScript 지원으로 코드 안정성 확보|
| 언어              | TypeScript                  | JavaScript의 슈퍼셋으로, 정적 타입 검사를 통해 개발 생산성 향상 및 런타임 오류 감소. 코드 유지 보수성 향상|
| UI 프레임워크       | tailwindcss                 | 유틸리티 우선 CSS 프레임워크로, 빠른 UI 개발과 유지보수 용이성을 제공. 반응형 디자인을 쉽게 구현 가능|
| UI 컴포넌트 라이브러리 | shadcn                      | Tailwind CSS 기반의 재사용 가능한 UI 컴포넌트 제공. 일관된 디자인 시스템 유지 및 개발 속도 향상|
| 아이콘              | lucide-react                | 간결하고 아름다운 아이콘 제공. UI 일관성 유지|
| 데이터 페칭         | @tanstack/react-query      | 서버 상태 관리 및 데이터 페칭 라이브러리. 캐싱, 재시도, 폴링 등 다양한 기능을 제공하여 사용자 경험 향상|
| 날짜/시간 처리       | date-fns                    | JavaScript 날짜 및 시간 조작 라이브러리. 다양한 포맷 및 로케일 지원|
| 유틸리티 라이브러리    | es-toolkit                  | 다양한 유틸리티 함수 제공. (문자열 조작, 배열 처리 등|

## 3. 시스템 아키텍처 설계

### 최상위 빌딩 블록

*   **프론트엔드 (Frontend)**:
    *   Next.js 15 기반의 사용자 인터페이스.
    *   에이전트 스케줄 관리, 예약 관리, SNS 자동 게시 기능 제공.
    *   Tailwind CSS, Shadcn UI, Lucide React를 사용하여 반응형 UI 구현.
*   **백엔드 (Backend)**:
    *   Next.js API 라우트를 사용하여 API 엔드포인트 제공.
    *   데이터베이스와의 상호작용 처리.
    *   Stripe 결제 연동, AI 스케줄 최적화, SNS 자동 게시 로직 구현.
*   **데이터베이스 (Database)**:
    *   (PRD에 Supabase 언급이 있으나, 명시적인 선택은 아님) 데이터베이스는 요구사항에 따라 선택 가능.
    *   에이전트, 상품, 예약, 사용자 정보 저장.
    *   PostgreSQL, MongoDB, Supabase 등의 옵션 고려.
*   **외부 서비스 (External Services)**:
    *   Stripe: 결제 처리.
    *   SNS API (Instagram, TikTok): 자동 게시 기능.
    *   AI 서비스 (미정): 스케줄 최적화.

### 최상위 컴포넌트 상호작용 다이어그램

```mermaid
graph TD
    A[Frontend (Next.js)] --> B[Backend (Next.js API)]
    B --> C[Database (PostgreSQL/MongoDB/Supabase)]
    B --> D[Stripe API]
    B --> E[SNS API (Instagram, TikTok)]
    B --> F[AI Service (미정)]
```

*   **Frontend (Next.js) -> Backend (Next.js API)**: 사용자 인터랙션에 따른 API 요청 및 응답 처리 (예: 예약 생성, 데이터 조회).
*   **Backend (Next.js API) -> Database**: 데이터 저장, 조회, 수정, 삭제 작업 수행.
*   **Backend (Next.js API) -> Stripe API**: 결제 요청 및 처리.
*   **Backend (Next.js API) -> SNS API**: SNS 게시글 생성 및 업로드.
*   **Backend (Next.js API) -> AI Service**: 스케줄 최적화 요청 및 결과 수신.

### 코드 구성 및 컨벤션

**도메인 기반 조직 전략**

*   **도메인 분리**: 코드베이스를 비즈니스 도메인/바운디드 컨텍스트(예: 사용자 관리, 결제 처리, 콘텐츠 관리)별로 구성합니다.
*   **계층 기반 아키텍처**: 문제를 별도의 계층(프레젠테이션, 비즈니스 로직, 데이터 액세스, 인프라)으로 분리합니다.
*   **기능 기반 모듈**: 기술적 문제별로 분리하기보다는 관련 기능을 함께 그룹화합니다.
*   **공유 컴포넌트**: 공통 유틸리티, 유형 및 재사용 가능한 컴포넌트를 전용 공유 모듈에 저장합니다.

**범용 파일 및 폴더 구조**

```
/
├── src/
│   ├── app/                      # Next.js 라우트 및 페이지
│   │   ├── api/                  # API 엔드포인트
│   │   │   ├── agents/         # 에이전트 관련 API
│   │   │   ├── activities/     # 액티비티 관련 API
│   │   │   ├── bookings/       # 예약 관련 API
│   │   │   └── ...
│   │   ├── components/           # UI 컴포넌트
│   │   │   ├── common/           # 재사용 가능한 컴포넌트
│   │   │   ├── agents/         # 에이전트 관련 컴포넌트
│   │   │   ├── activities/     # 액티비티 관련 컴포넌트
│   │   │   ├── bookings/       # 예약 관련 컴포넌트
│   │   │   └── ...
│   │   ├── lib/                  # 유틸리티 함수 및 헬퍼
│   │   │   ├── api-client.ts     # API 클라이언트
│   │   │   ├── date-utils.ts     # 날짜 관련 유틸리티
│   │   │   ├── ai-utils.ts       # AI 관련 유틸리티
│   │   │   └── ...
│   │   ├── types/                # TypeScript 타입 정의
│   │   │   ├── agent.ts          # 에이전트 타입
│   │   │   ├── activity.ts       # 액티비티 타입
│   │   │   ├── booking.ts        # 예약 타입
│   │   │   └── ...
│   ├── styles/                 # CSS 스타일 (Tailwind CSS)
│   │   ├── globals.css         # 전역 스타일
│   │   └── ...
├── public/                     # 정적 파일 (이미지, 폰트)
├── next.config.js              # Next.js 설정 파일
├── tsconfig.json               # TypeScript 설정 파일
└── package.json                # 프로젝트 의존성 및 스크립트
```

### 데이터 흐름 및 통신 패턴

*   **클라이언트-서버 통신**: API 요청/응답 패턴 (RESTful API).
*   **데이터베이스 상호작용**: 데이터베이스에 직접 쿼리 또는 ORM (예: Prisma, TypeORM) 사용.
*   **외부 서비스 통합**: API 키를 사용하여 외부 서비스 API (Stripe, SNS API)와 통합.
*   **실시간 통신**: 필요시 WebSocket 또는 SSE (Server-Sent Events) 구현 (예: 예약 상태 업데이트 알림).
*   **데이터 동기화**: 분산된 컴포넌트 간의 일관성 유지를 위한 패턴 적용 (예: 낙관적 업데이트).

## 4. 성능 및 최적화 전략

*   **코드 분할 (Code Splitting)**: Next.js의 동적 import를 사용하여 초기 로드 시 필요한 코드만 로드.
*   **이미지 최적화**: Next.js의 Image 컴포넌트를 사용하여 이미지 크기 최적화 및 레이지 로딩 적용.
*   **캐싱**: @tanstack/react-query를 사용하여 API 응답 캐싱.
*   **데이터베이스 쿼리 최적화**: 필요한 데이터만 조회하도록 쿼리 작성, 인덱싱 활용.

## 5. 구현 로드맵 및 마일스톤

### 1단계: 기반 (MVP 구현)

*   **핵심 인프라**: 프로젝트 설정 (Next.js 15, TypeScript, Tailwind CSS), 데이터베이스 설정.
*   **필수 기능**: 에이전트 CRUD API, 상품 CRUD API, 로그인/회원가입.
*   **기본 보안**: HTTPS 적용, 기본적인 입력 유효성 검사.
*   **개발 환경**: 개발 환경 설정, CI/CD 파이프라인 구축.
*   **예상 완료 기간**: 4주

### 2단계: 기능 향상

*   **고급 기능**: 캘린더 UI, 예약 로직, 결제 연동 (Stripe), SNS 자동 게시 (베타).
*   **성능 최적화**: 코드 분할, 이미지 최적화, 캐싱 적용.
*   **보안 강화**: GDPR & PCI-DSS 준수, XSS/CSRF 방어.
*   **모니터링 구현**: 로그 수집 및 분석, 성능 모니터링.
*   **예상 완료 기간**: 8주

## 6. 위험 평가 및 완화 전략

### 기술적 위험 분석

*   **기술 위험**: AI 스케줄 최적화의 복잡성, SNS API 변경에 대한 의존성.
*   **성능 위험**: 데이터 증가에 따른 성능 저하, 트래픽 증가에 따른 서버 부하.
*   **보안 위험**: 결제 정보 유출, XSS/CSRF 공격.
*   **통합 위험**: Stripe 결제 연동 실패, SNS API 장애.
*   **완화 전략**:
    *   AI 스케줄 최적화: 점진적인 기능 개발 및 테스트, 대체 알고리즘 준비.
    *   SNS API 변경: 공식 파트너사 모듈 활용 및 API 변경 모니터링.
    *   성능 저하: 코드 최적화, 캐싱, 데이터베이스 인덱싱.
    *   서버 부하: 서버 확장, 로드 밸런싱.
    *   보안 취약점: 정기적인 보안 점검 및 업데이트, 보안 코딩 가이드라인 준수.
    *   Stripe 연동 실패: PayPal 백업 결제 시스템 구축.
    *   SNS API 장애: 대체 SNS 플랫폼 연동 고려.

### 프로젝트 배송 위험

*   **일정 위험**: 개발 일정 지연, 외부 의존성 문제.
*   **리소스 위험**: 개발팀 역량 부족, 핵심 개발자 이탈.
*   **품질 위험**: 코드 품질 저하, 테스트 부족.
*   **배포 위험**: 프로덕션 환경 문제, 배포 실패.
*   **비상 계획**:
    *   일정 지연: 핵심 기능 우선 개발, 일정 재조정.
    *   리소스 부족: 추가 인력 확보, 외부 전문가 활용.
    *   품질 저하: 코드 리뷰 강화, 자동화 테스트 도입.
    *   배포 실패: 롤백 계획 수립, 모니터링 강화.

